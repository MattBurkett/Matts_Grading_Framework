Included Files:
	grading.c 		   				- Souce code for the grading framework
	makefile		   
		all: 		   				- compile grading.c
		setUp: 		   				- setup a new directory called 'newProj'

Directories:
	/Grading_Materials 				- Holds all the tests, solutions, inputs, source code, and the executable for grading.c
		/log.txt					- use 'watch grep . log.txt' in another terminal to view the revelent output while grading (incorrect output and valgrind output)
									| *NOTE* only appears while the submissions generate a revelent output, watch will still work even if the file doesn't exist when initally used
		
		/input_data	   				- all the input files the submissions need as input. i.e. csv and make files 
									| *NOTE* a symbolic link to each file in this folder is dynamically set during grading

		/test_cases					- for each desired test, create a file called test%.txt and solution%.txt where % is the test number (test numbers must increment)
			scores.txt				- has as many rows as there are test cases. Each row is of the form "*testNumber* *maxScore*" without the *s
			test%.txt				- the input data for a test (redirects input to the submissions via '<')
			solution&.txt			- the exact output file generated by the test case on the solution project
			valgrind%.txt			- % must be an existing test number, after grading test cases, all valgrind tests will be executed and report the frees / allocs
									| ex: 'valgrind ./a.out --leak-check=full'

		/partial_credits 			- When grading, an incorrect solution will have the option to assign partial credit. If that option is chosen, the input will be stored here
			/test%					- Each test case that has any assigned partial credit will generate its own test% folder to store those values
				/name%.txt			- the output of the first student to have produced an incorrect output (students with matching incorrect output do not store a duplicate file)
				/name%.txt.score 	- stores the partial credit score and description for the respective output.

	/Late			   				- For all students who submitted late, add a folder containing their source code to the /Late folder
		/studentDirName				- When downloaded via zyantee, the form is firstName_lastName_email_date. This format is used in sorting. If the format is different, adjust the sort function
			/grading_output			- Holds all the output and diff files from the test cases (removed after entering additional commands durring grading)
		
		/partialcreditmatches.txt	- temparary file used to find matching, already existing, partial credits for a failed test durring grading (ignore in most cases)
	
	/On_Time		   				- For all students who submitted on time, add a folder containing their source code to the /On_Time folder
									| Same as Late, but for On_Time submissions

Commands:
	Main menu:
		skip						- skips one entry forward
		skip %N 					- skips N entrys (Positive or Negative)
		goto %N 					- advances to student N
		gotos %S 					- advances to student with name begining with S (strncmp())
		exit 						- exits grading framework (partial credit scores stay stored in the file system)
		auto (on or off)			- sets the auto mode
			ON 						- automatically uses any matching partial credit score 
									| *NOTE* unseen outputs still need to be graded
			OFF 					- promts after finding each matching partial credit score
		grade 						- grades the element at the top of the list
		*blank* 					- differes based on previous statement
			-prev = skip 			- reexecutes skip
			-prev = skip %N 		- reexecutes skip with N
			-prev = goto %N 		- executes 'grade'
			-prev = gotos %S 		- executes 'grade'
			-prev = auto  			- executes 'grade'

	Grading:
		next or *blank*				- finishes the current submission by showing a summary then continues to the next submissino
		exit 						- exits the grading framework
		subl diff 					- opens a sublime window showing only the diff files
		subl out 					- opens a sublime window showing only the output files
		subl all 					- opens a sublime window showing the entire submission directory
		valgrind %N 				- runs the same valgrind command in the same way as defined earlier, but for any test case N
									| *NOTE* use to test memory on a different test case should a student not finish the test defined in /Grading_Materials/test_cases/
		*command* 					- all other input are executed as bash commands
		'{}'						- in your bash command, use '{}' in place of the projects absolute directory
		'[]'						- same as '{}' buf for the current submission directory
		